
/* $Revision: 1.1 $ */
/*
 * Copyright (c) 1984-1998 by The MathWorks, Inc.
 * All Rights Reserved.
 */
/* start of libmmfile.mlib */

target    = "C";
include   = "libmmfile.h";
timestamp = "Wed Sep 27 18:52:50 2000";

acot {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfAcot;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

acoth {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfAcoth;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

acsc {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfAcsc;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

acsch {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfAcsch;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

allchild {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfAllchild;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

angle {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfAngle;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

arpackc {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfArpackc;   /* mxArray in and out */
    cname    = mlfNarpackc;  /* name when nargout used */
    cname    = mlfVarpackc;  /* name when void */
    nargout  = 1;        /* nargout used */
}

asec {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfAsec;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

asech {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfAsech;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

automesh {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfAutomesh;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

axis {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfAxis;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

base2dec {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfBase2dec;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

beta {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfBeta;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

betacore {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfBetacore;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

betainc {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfBetainc;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

betaln {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfBetaln;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

bicg {  /* M function name */
    nin      = 8;        /* number of M inputs */
    nout     = 5;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfBicg;   /* mxArray in and out */
    cname    = mlfNbicg;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

bicgstab {  /* M function name */
    nin      = 8;        /* number of M inputs */
    nout     = 5;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfBicgstab;   /* mxArray in and out */
    cname    = mlfNbicgstab;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

bin2dec {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfBin2dec;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

bitmax {  /* M function name */
    nin      = 0;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfBitmax;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

blanks {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfBlanks;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

calendar {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfCalendar;   /* mxArray in and out */
    cname    = mlfNcalendar;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

cart2pol {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfCart2pol;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

cart2sph {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfCart2sph;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

cdf2rdf {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfCdf2rdf;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

celldisp {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 0;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfCelldisp;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

cellfun {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfCellfun;   /* mxArray in and out */
    cname    = mlfNcellfun;  /* name when nargout used */
    cname    = mlfVcellfun;  /* name when void */
    nargout  = 1;        /* nargout used */
}

cellstr {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfCellstr;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

cgs {  /* M function name */
    nin      = 8;        /* number of M inputs */
    nout     = 5;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfCgs;   /* mxArray in and out */
    cname    = mlfNcgs;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

colgroup {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    fullname = "funfun/private/colgroup";   /* private function */
    scope    = private;   /* where function defined */
    cname    = mlfFunfun_private_colgroup;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

colmmd {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfColmmd;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

colperm {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfColperm;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

compan {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfCompan;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

complex {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfComplex;   /* mxArray in and out */
    cname    = mlfNcomplex;  /* name when nargout used */
    cname    = mlfVcomplex;  /* name when void */
    nargout  = 1;        /* nargout used */
}

cond {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfCond;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

condeig {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfCondeig;   /* mxArray in and out */
    cname    = mlfNcondeig;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

condest {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfCondest;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

conv {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfConv;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

corrcoef {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfCorrcoef;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

cot {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfCot;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

coth {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfCoth;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

cov {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfCov;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

cplxpair {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfCplxpair;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

cross {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfCross;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

csc {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfCsc;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

csch {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfCsch;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

cubicmx {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    fullname = "polyfun/private/cubicmx";   /* private function */
    scope    = private;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfPolyfun_private_cubicmx;   /* mxArray in and out */
    cname    = mlfNpolyfun_private_cubicmx;  /* name when nargout used */
    cname    = mlfVpolyfun_private_cubicmx;  /* name when void */
    nargout  = 1;        /* nargout used */
}

cumtrapz {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfCumtrapz;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

daeic12 {  /* M function name */
    nin      = 16;        /* number of M inputs */
    nout     = 8;        /* number of M outputs */
    fullname = "funfun/private/daeic12";   /* private function */
    scope    = private;   /* where function defined */
    cname    = mlfFunfun_private_daeic12;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

daeic3 {  /* M function name */
    nin      = 20;        /* number of M inputs */
    nout     = 8;        /* number of M outputs */
    fullname = "funfun/private/daeic3";   /* private function */
    scope    = private;   /* where function defined */
    cname    = mlfFunfun_private_daeic3;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

date {  /* M function name */
    nin      = 0;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfDate;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

datenum {  /* M function name */
    nin      = 6;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfDatenum;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

datenummx {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfDatenummx;   /* mxArray in and out */
    cname    = mlfNdatenummx;  /* name when nargout used */
    cname    = mlfVdatenummx;  /* name when void */
    nargout  = 1;        /* nargout used */
}

datestr {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfDatestr;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

datevec {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 6;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfDatevec;   /* mxArray in and out */
    cname    = mlfNdatevec;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

datevecmx {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfDatevecmx;   /* mxArray in and out */
    cname    = mlfNdatevecmx;  /* name when nargout used */
    cname    = mlfVdatevecmx;  /* name when void */
    nargout  = 1;        /* nargout used */
}

dblquad {  /* M function name */
    nin      = 8;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfDblquad;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

deal {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfDeal;   /* mxArray in and out */
    cname    = mlfNdeal;  /* name when nargout used */
    cname    = mlfVdeal;  /* name when void */
    nargout  = 1;        /* nargout used */
}

deblank {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfDeblank;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

deblank {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    fullname = "@default/deblank";   /* method function */
    scope    = method;   /* where function defined */
    cname    = mlf_default_deblank;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

deblank {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    fullname = "@cell/deblank";   /* method function */
    scope    = method;   /* where function defined */
    cname    = mlf_cell_deblank;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

dec2base {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfDec2base;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

dec2bin {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfDec2bin;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

dec2hex {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfDec2hex;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

deconv {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfDeconv;   /* mxArray in and out */
    cname    = mlfNdeconv;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

del2 {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfDel2;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

delaunay {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfDelaunay;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

delaunayc {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    fullname = "polyfun/private/delaunayc";   /* private function */
    scope    = private;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfPolyfun_private_delaunayc;   /* mxArray in and out */
    cname    = mlfNpolyfun_private_delaunayc;  /* name when nargout used */
    cname    = mlfVpolyfun_private_delaunayc;  /* name when void */
    nargout  = 1;        /* nargout used */
}

delaunayn {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfDelaunayn;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

delete {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 0;        /* number of M outputs */
    fullname = "@char/delete";   /* method function */
    scope    = method;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlf_char_delete;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

dmperm {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 4;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfDmperm;   /* mxArray in and out */
    cname    = mlfNdmperm;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

dot {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfDot;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

dsearch {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfDsearch;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

dsrchmx {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    fullname = "polyfun/private/dsrchmx";   /* private function */
    scope    = private;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfPolyfun_private_dsrchmx;   /* mxArray in and out */
    cname    = mlfNpolyfun_private_dsrchmx;  /* name when nargout used */
    cname    = mlfVpolyfun_private_dsrchmx;  /* name when void */
    nargout  = 1;        /* nargout used */
}

eigs {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfEigs;   /* mxArray in and out */
    cname    = mlfNeigs;  /* name when nargout used */
    cname    = mlfVeigs;  /* name when void */
    nargout  = 1;        /* nargout used */
}

eigs2 {  /* M function name */
    nin      = 8;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfEigs2;   /* mxArray in and out */
    cname    = mlfNeigs2;  /* name when nargout used */
    cname    = mlfVeigs2;  /* name when void */
    nargout  = 1;        /* nargout used */
}

ellipj {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfEllipj;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

ellipke {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfEllipke;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

eomday {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfEomday;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

erf {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfErf;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

erfc {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfErfc;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

erfcore {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfErfcore;   /* mxArray in and out */
    cname    = mlfNerfcore;  /* name when nargout used */
    cname    = mlfVerfcore;  /* name when void */
    nargout  = 1;        /* nargout used */
}

erfcx {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfErfcx;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

erfinv {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfErfinv;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

etime {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfEtime;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

expint {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfExpint;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

expm1 {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfExpm1;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

expm2 {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfExpm2;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

expm3 {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfExpm3;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

factor {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfFactor;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

fcnchk {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfFcnchk;   /* mxArray in and out */
    cname    = mlfNfcnchk;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

fft2 {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfFft2;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

fftshift {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfFftshift;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

fgetl {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfFgetl;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

fileparts {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 4;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfFileparts;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

filesep {  /* M function name */
    nin      = 0;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfFilesep;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

filter2 {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfFilter2;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

fliplr {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfFliplr;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

flipud {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfFlipud;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

fmin {  /* M function name */
    nin      = 5;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfFmin;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

fminbnd {  /* M function name */
    nin      = 5;        /* number of M inputs */
    nout     = 4;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfFminbnd;   /* mxArray in and out */
    cname    = mlfNfminbnd;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

fmins {  /* M function name */
    nin      = 5;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfFmins;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

fminsearch {  /* M function name */
    nin      = 4;        /* number of M inputs */
    nout     = 4;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfFminsearch;   /* mxArray in and out */
    cname    = mlfNfminsearch;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

foptions {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfFoptions;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

freqspace {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfFreqspace;   /* mxArray in and out */
    cname    = mlfNfreqspace;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

frewind {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 0;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfFrewind;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

fullfile {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfFullfile;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

funm {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfFunm;   /* mxArray in and out */
    cname    = mlfNfunm;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

funstring {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    fullname = "funfun/private/funstring";   /* private function */
    scope    = private;   /* where function defined */
    cname    = mlfFunfun_private_funstring;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

fzero {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 4;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfFzero;   /* mxArray in and out */
    cname    = mlfNfzero;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

gamma {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfGamma;   /* mxArray in and out */
    cname    = mlfNgamma;  /* name when nargout used */
    cname    = mlfVgamma;  /* name when void */
    nargout  = 1;        /* nargout used */
}

gammainc {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfGammainc;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

gammaln {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfGammaln;   /* mxArray in and out */
    cname    = mlfNgammaln;  /* name when nargout used */
    cname    = mlfVgammaln;  /* name when void */
    nargout  = 1;        /* nargout used */
}

gca {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfGca;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

gcd {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfGcd;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

gcf {  /* M function name */
    nin      = 0;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfGcf;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

getfield {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfGetfield;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

gmres {  /* M function name */
    nin      = 9;        /* number of M inputs */
    nout     = 5;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfGmres;   /* mxArray in and out */
    cname    = mlfNgmres;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

gradient {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfGradient;   /* mxArray in and out */
    cname    = mlfVgradient;  /* name when void */
    nargout  = 0;        /* nargout not used */
}

griddata {  /* M function name */
    nin      = 6;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfGriddata;   /* mxArray in and out */
    cname    = mlfNgriddata;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

hadamard {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfHadamard;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

hankel {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfHankel;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

hex2dec {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfHex2dec;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

hex2num {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfHex2num;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

hilb {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfHilb;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

histc {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfHistc;   /* mxArray in and out */
    cname    = mlfNhistc;  /* name when nargout used */
    cname    = mlfVhistc;  /* name when void */
    nargout  = 1;        /* nargout used */
}

hold {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 0;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfHold;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

ifft2 {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfIfft2;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

ind2sub {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargout;           /* varargout used */
    cname    = mlfInd2sub;   /* mxArray in and out */
    cname    = mlfNind2sub;  /* name when nargout used */
    cname    = mlfVind2sub;  /* name when void */
    nargout  = 1;        /* nargout used */
}

inpolygon {  /* M function name */
    nin      = 4;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfInpolygon;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

int2str {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfInt2str;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

interp1 {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfInterp1;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

interp1q {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfInterp1q;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

interp2 {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfInterp2;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

interpft {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfInterpft;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

intersect {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfIntersect;   /* mxArray in and out */
    cname    = mlfNintersect;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

intersect {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    fullname = "@default/intersect";   /* method function */
    scope    = method;   /* where function defined */
    cname    = mlf_default_intersect;   /* mxArray in and out */
    cname    = mlfN_default_intersect;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

intersect {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    fullname = "@cell/intersect";   /* method function */
    scope    = method;   /* where function defined */
    cname    = mlf_cell_intersect;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

invhilb {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfInvhilb;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

ipermute {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfIpermute;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

iscell {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfIscell;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

iscellstr {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfIscellstr;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

isfield {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfIsfield;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

ishold {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfIshold;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

isieee {  /* M function name */
    nin      = 0;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfIsieee;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

ismembc {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfIsmembc;   /* mxArray in and out */
    cname    = mlfNismembc;  /* name when nargout used */
    cname    = mlfVismembc;  /* name when void */
    nargout  = 1;        /* nargout used */
}

ismember {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfIsmember;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

ismember {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    fullname = "@default/ismember";   /* method function */
    scope    = method;   /* where function defined */
    cname    = mlf_default_ismember;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

ismember {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    fullname = "@cell/ismember";   /* method function */
    scope    = method;   /* where function defined */
    cname    = mlf_cell_ismember;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

isnumeric {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfIsnumeric;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

isobject {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfIsobject;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

ispc {  /* M function name */
    nin      = 0;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfIspc;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

isprime {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfIsprime;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

isstruct {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfIsstruct;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

isunix {  /* M function name */
    nin      = 0;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfIsunix;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

isvms {  /* M function name */
    nin      = 0;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfIsvms;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

iterapp {  /* M function name */
    nin      = 5;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    fullname = "sparfun/private/iterapp";   /* private function */
    scope    = private;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfSparfun_private_iterapp;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

iterchk {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    fullname = "sparfun/private/iterchk";   /* private function */
    scope    = private;   /* where function defined */
    cname    = mlfSparfun_private_iterchk;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

itermsg {  /* M function name */
    nin      = 7;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    fullname = "sparfun/private/itermsg";   /* private function */
    scope    = private;   /* where function defined */
    cname    = mlfSparfun_private_itermsg;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

kron {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfKron;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

lcm {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfLcm;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

legendre {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfLegendre;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

lin2mu {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfLin2mu;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

linspace {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfLinspace;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

log10 {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfLog10;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

logm {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfLogm;   /* mxArray in and out */
    cname    = mlfNlogm;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

logspace {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfLogspace;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

lscov {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfLscov;   /* mxArray in and out */
    cname    = mlfNlscov;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

lsqnonneg {  /* M function name */
    nin      = 4;        /* number of M inputs */
    nout     = 6;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfLsqnonneg;   /* mxArray in and out */
    cname    = mlfNlsqnonneg;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

magic {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfMagic;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

mat2str {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfMat2str;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

mbcharscalar {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 0;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfMbcharscalar;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

mbcharvector {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 0;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfMbcharvector;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

mbintscalar {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 0;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfMbintscalar;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

mbintvector {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 0;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfMbintvector;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

mbrealscalar {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 0;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfMbrealscalar;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

mbrealvector {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 0;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfMbrealvector;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

mean {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfMean;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

median {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfMedian;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

meshgrid {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfMeshgrid;   /* mxArray in and out */
    cname    = mlfNmeshgrid;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

mkpp {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfMkpp;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

mod {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfMod;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

mpoles {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfMpoles;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

mu2lin {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfMu2lin;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

nargchk {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfNargchk;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

nargoutchk {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfNargoutchk;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

nchoosek {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfNchoosek;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

nextpow2 {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfNextpow2;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

nnls {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfNnls;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

nnz {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfNnz;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

nonzeros {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfNonzeros;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

normest {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfNormest;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

normest1 {  /* M function name */
    nin      = 4;        /* number of M inputs */
    nout     = 4;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfNormest1;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

now {  /* M function name */
    nin      = 0;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfNow;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

null {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfNull;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

num2cell {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfNum2cell;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

num2str {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfNum2str;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

numjac {  /* M function name */
    nin      = 10;        /* number of M inputs */
    nout     = 4;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfNumjac;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

nzmax {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfNzmax;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

ode113 {  /* M function name */
    nin      = 5;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfOde113;   /* mxArray in and out */
    cname    = mlfNode113;  /* name when nargout used */
    cname    = mlfVode113;  /* name when void */
    nargout  = 1;        /* nargout used */
}

ode15s {  /* M function name */
    nin      = 5;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfOde15s;   /* mxArray in and out */
    cname    = mlfNode15s;  /* name when nargout used */
    cname    = mlfVode15s;  /* name when void */
    nargout  = 1;        /* nargout used */
}

ode23 {  /* M function name */
    nin      = 5;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfOde23;   /* mxArray in and out */
    cname    = mlfNode23;  /* name when nargout used */
    cname    = mlfVode23;  /* name when void */
    nargout  = 1;        /* nargout used */
}

ode23s {  /* M function name */
    nin      = 5;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfOde23s;   /* mxArray in and out */
    cname    = mlfNode23s;  /* name when nargout used */
    cname    = mlfVode23s;  /* name when void */
    nargout  = 1;        /* nargout used */
}

ode45 {  /* M function name */
    nin      = 5;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfOde45;   /* mxArray in and out */
    cname    = mlfNode45;  /* name when nargout used */
    cname    = mlfVode45;  /* name when void */
    nargout  = 1;        /* nargout used */
}

odearguments {  /* M function name */
    nin      = 7;        /* number of M inputs */
    nout     = 18;        /* number of M outputs */
    fullname = "funfun/private/odearguments";   /* private function */
    scope    = private;   /* where function defined */
    cname    = mlfFunfun_private_odearguments;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

odeevents {  /* M function name */
    nin      = 6;        /* number of M inputs */
    nout     = 7;        /* number of M outputs */
    fullname = "funfun/private/odeevents";   /* private function */
    scope    = private;   /* where function defined */
    cname    = mlfFunfun_private_odeevents;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

odeget {  /* M function name */
    nin      = 4;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfOdeget;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

odejacobian {  /* M function name */
    nin      = 6;        /* number of M inputs */
    nout     = 7;        /* number of M outputs */
    fullname = "funfun/private/odejacobian";   /* private function */
    scope    = private;   /* where function defined */
    cname    = mlfFunfun_private_odejacobian;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

odemass {  /* M function name */
    nin      = 6;        /* number of M inputs */
    nout     = 6;        /* number of M outputs */
    fullname = "funfun/private/odemass";   /* private function */
    scope    = private;   /* where function defined */
    cname    = mlfFunfun_private_odemass;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

odemassexplicit {  /* M function name */
    nin      = 8;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    fullname = "funfun/private/odemassexplicit";   /* private function */
    scope    = private;   /* where function defined */
    cname    = mlfFunfun_private_odemassexplicit;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

odemxv {  /* M function name */
    nin      = 5;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    fullname = "funfun/private/odemxv";   /* private function */
    scope    = private;   /* where function defined */
    cname    = mlfFunfun_private_odemxv;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

odeplot {  /* M function name */
    nin      = 4;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfOdeplot;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

odeset {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfOdeset;   /* mxArray in and out */
    cname    = mlfNodeset;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

odezero {  /* M function name */
    nin      = 10;        /* number of M inputs */
    nout     = 5;        /* number of M outputs */
    fullname = "funfun/private/odezero";   /* private function */
    scope    = private;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfFunfun_private_odezero;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

optimget {  /* M function name */
    nin      = 4;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfOptimget;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

optimset {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfOptimset;   /* mxArray in and out */
    cname    = mlfNoptimset;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

orth {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfOrth;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

pascal {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfPascal;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

pcg {  /* M function name */
    nin      = 8;        /* number of M inputs */
    nout     = 5;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfPcg;   /* mxArray in and out */
    cname    = mlfNpcg;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

pchip {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfPchip;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

perms {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfPerms;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

pinv {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfPinv;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

planerot {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfPlanerot;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

pol2cart {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfPol2cart;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

poly {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfPoly;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

polyarea {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfPolyarea;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

polyder {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfPolyder;   /* mxArray in and out */
    cname    = mlfNpolyder;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

polyeig {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfPolyeig;   /* mxArray in and out */
    cname    = mlfNpolyeig;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

polyfit {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfPolyfit;   /* mxArray in and out */
    cname    = mlfNpolyfit;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

polyval {  /* M function name */
    nin      = 4;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfPolyval;   /* mxArray in and out */
    cname    = mlfNpolyval;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

polyvalm {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfPolyvalm;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

ppval {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfPpval;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

primes {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfPrimes;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

pwd {  /* M function name */
    nin      = 0;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfPwd;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

qhullmx {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    fullname = "polyfun/private/qhullmx";   /* private function */
    scope    = private;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfPolyfun_private_qhullmx;   /* mxArray in and out */
    cname    = mlfNpolyfun_private_qhullmx;  /* name when nargout used */
    cname    = mlfVpolyfun_private_qhullmx;  /* name when void */
    nargout  = 1;        /* nargout used */
}

qmr {  /* M function name */
    nin      = 8;        /* number of M inputs */
    nout     = 5;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfQmr;   /* mxArray in and out */
    cname    = mlfNqmr;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

qrdelete {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfQrdelete;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

qrinsert {  /* M function name */
    nin      = 4;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfQrinsert;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

quad {  /* M function name */
    nin      = 6;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfQuad;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

quad8 {  /* M function name */
    nin      = 6;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfQuad8;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

randperm {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfRandperm;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

rank {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfRank;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

rat {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfRat;   /* mxArray in and out */
    cname    = mlfNrat;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

rats {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfRats;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

reallog {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfReallog;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

realmax {  /* M function name */
    nin      = 0;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfRealmax;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

realmin {  /* M function name */
    nin      = 0;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfRealmin;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

realpow {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfRealpow;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

realsqrt {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfRealsqrt;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

rectint {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfRectint;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

refresh {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 0;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfRefresh;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

repmat {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfRepmat;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

resi2 {  /* M function name */
    nin      = 5;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfResi2;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

residue {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfResidue;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

rjr {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfRjr;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

rmfield {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfRmfield;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

roots {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfRoots;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

rosser {  /* M function name */
    nin      = 0;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfRosser;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

rot90 {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfRot90;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

rref {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfRref;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

rsf2csf {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfRsf2csf;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

sec {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSec;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

sech {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSech;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

setdiff {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSetdiff;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

setdiff {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    fullname = "@default/setdiff";   /* method function */
    scope    = method;   /* where function defined */
    cname    = mlf_default_setdiff;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

setdiff {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    fullname = "@cell/setdiff";   /* method function */
    scope    = method;   /* where function defined */
    cname    = mlf_cell_setdiff;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

setfield {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfSetfield;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

setxor {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSetxor;   /* mxArray in and out */
    cname    = mlfNsetxor;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

setxor {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    fullname = "@default/setxor";   /* method function */
    scope    = method;   /* where function defined */
    cname    = mlf_default_setxor;   /* mxArray in and out */
    cname    = mlfN_default_setxor;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

setxor {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    fullname = "@cell/setxor";   /* method function */
    scope    = method;   /* where function defined */
    cname    = mlf_cell_setxor;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

shiftdim {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfShiftdim;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

sort {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    fullname = "@cell/sort";   /* method function */
    scope    = method;   /* where function defined */
    cname    = mlf_cell_sort;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

sortrows {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSortrows;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

spalloc {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSpalloc;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

spaugment {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSpaugment;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

spconvert {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSpconvert;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

spdiags {  /* M function name */
    nin      = 4;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSpdiags;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

speye {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSpeye;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

spfun {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSpfun;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

sph2cart {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSph2cart;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

spline {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSpline;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

splncore {  /* M function name */
    nin      = 4;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSplncore;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

spones {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSpones;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

spparms {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSpparms;   /* mxArray in and out */
    cname    = mlfNspparms;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

sprand {  /* M function name */
    nin      = 4;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSprand;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

sprandn {  /* M function name */
    nin      = 4;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSprandn;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

sprandsym {  /* M function name */
    nin      = 4;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSprandsym;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

sqrtm {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSqrtm;   /* mxArray in and out */
    cname    = mlfNsqrtm;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

std {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfStd;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

str2double {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfStr2double;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

str2mat {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfStr2mat;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

str2num {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfStr2num;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

strcat {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfStrcat;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

strcat {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    fullname = "@default/strcat";   /* method function */
    scope    = method;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlf_default_strcat;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

strcat {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    fullname = "@cell/strcat";   /* method function */
    scope    = method;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlf_cell_strcat;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

strjust {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfStrjust;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

strmatch {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfStrmatch;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

strmatch {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    fullname = "@default/strmatch";   /* method function */
    scope    = method;   /* where function defined */
    cname    = mlf_default_strmatch;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

strmatch {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    fullname = "@cell/strmatch";   /* method function */
    scope    = method;   /* where function defined */
    cname    = mlf_cell_strmatch;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

strtok {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfStrtok;   /* mxArray in and out */
    cname    = mlfNstrtok;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

strvcat {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfStrvcat;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

sub2ind {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfSub2ind;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

subspace {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSubspace;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

svds {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 4;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfSvds;   /* mxArray in and out */
    cname    = mlfNsvds;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

symbfact {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 5;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSymbfact;   /* mxArray in and out */
    cname    = mlfNsymbfact;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

symmmd {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSymmmd;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

symrcm {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfSymrcm;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

table1 {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfTable1;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

table2 {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfTable2;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

tempdir {  /* M function name */
    nin      = 0;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfTempdir;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

tempname {  /* M function name */
    nin      = 0;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfTempname;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

tic {  /* M function name */
    nin      = 0;        /* number of M inputs */
    nout     = 0;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfTic;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

toc {  /* M function name */
    nin      = 0;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfToc;   /* mxArray in and out */
    cname    = mlfNtoc;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

toeplitz {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfToeplitz;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

trace {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfTrace;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

trapz {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfTrapz;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

tsearch {  /* M function name */
    nin      = 5;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfTsearch;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

tsrchmx {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    fullname = "polyfun/private/tsrchmx";   /* private function */
    scope    = private;   /* where function defined */
    varargin;            /* varargin used */
    varargout;           /* varargout used */
    cname    = mlfPolyfun_private_tsrchmx;   /* mxArray in and out */
    cname    = mlfNpolyfun_private_tsrchmx;  /* name when nargout used */
    cname    = mlfVpolyfun_private_tsrchmx;  /* name when void */
    nargout  = 1;        /* nargout used */
}

union {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfUnion;   /* mxArray in and out */
    cname    = mlfNunion;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

union {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    fullname = "@default/union";   /* method function */
    scope    = method;   /* where function defined */
    cname    = mlf_default_union;   /* mxArray in and out */
    cname    = mlfN_default_union;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

union {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    fullname = "@cell/union";   /* method function */
    scope    = method;   /* where function defined */
    cname    = mlf_cell_union;   /* mxArray in and out */
    cname    = mlfN_cell_union;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

unique {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfUnique;   /* mxArray in and out */
    cname    = mlfNunique;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

unique {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    fullname = "@default/unique";   /* method function */
    scope    = method;   /* where function defined */
    cname    = mlf_default_unique;   /* mxArray in and out */
    cname    = mlfN_default_unique;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

unique {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 3;        /* number of M outputs */
    fullname = "@cell/unique";   /* method function */
    scope    = method;   /* where function defined */
    cname    = mlf_cell_unique;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

unmkpp {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 5;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfUnmkpp;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

unwrap {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfUnwrap;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

usejava {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfUsejava;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

vander {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfVander;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

vectorize {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfVectorize;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

view {  /* M function name */
    nin      = 3;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfView;   /* mxArray in and out */
    cname    = mlfNview;  /* name when nargout used */
    nargout  = 1;        /* nargout used */
}

weekday {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 2;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfWeekday;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

wilkinson {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfWilkinson;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

xor {  /* M function name */
    nin      = 2;        /* number of M inputs */
    nout     = 1;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfXor;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

xychk {  /* M function name */
    nin      = 1;        /* number of M inputs */
    nout     = 4;        /* number of M outputs */
    scope    = global;   /* where function defined */
    varargin;            /* varargin used */
    cname    = mlfXychk;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

xyzchk {  /* M function name */
    nin      = 5;        /* number of M inputs */
    nout     = 6;        /* number of M outputs */
    scope    = global;   /* where function defined */
    cname    = mlfXyzchk;   /* mxArray in and out */
    nargout  = 0;        /* nargout not used */
}

/* end of libmmfile.mlib */
